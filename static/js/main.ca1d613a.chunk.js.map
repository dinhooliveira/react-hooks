{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","usuarioPerfil","setUsuarioPerfil","usuarios","setUsuarios","posts","setPosts","loadingUsuarios","setLoadingUsuarios","loadingPosts","setLoadingPosts","comentarios","setComentarios","showModalComentarios","setShowModalPostsComentarios","showModalPosts","setShowModalPosts","showUsuarioPerfil","setShowUsuarioPerfil","Header","Layout","Content","Footer","Sider","a","fetch","resp","json","data","id","useEffect","getUsuarios","style","background","color","textAlign","loading","header","margin","pagination","onChange","page","console","log","pageSize","dataSource","bordered","renderItem","item","Item","action","name","username","email","type","icon","marginRight","onClick","verPosts","visible","onClose","phone","website","company","catchPhrase","bs","address","street","suite","city","zipcode","width","onCancel","footer","title","verComentarios","body","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca1d613a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {List, Button, Modal, Drawer, Divider, Layout, Content} from \"antd\";\n\nexport default function App() {\n\n    const [usuarioPerfil, setUsuarioPerfil] = useState({})\n    const [usuarios, setUsuarios] = useState([]);\n    const [posts, setPosts] = useState([]);\n    const [loadingUsuarios, setLoadingUsuarios] = useState(false);\n    const [loadingPosts, setLoadingPosts] = useState(false);\n    const [comentarios, setComentarios] = useState([]);\n    const [showModalComentarios, setShowModalPostsComentarios] = useState(false);\n    const [showModalPosts, setShowModalPosts] = useState(false);\n    const [showUsuarioPerfil, setShowUsuarioPerfil] = useState(false);\n    const {Header, Footer, Sider, Content} = Layout;\n\n    useEffect(() => {\n\n        getUsuarios();\n\n    }, []);\n\n    async function getUsuarios() {\n        const resp = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n        const data = await resp.json();\n        setUsuarios(data);\n    }\n\n    async function verPosts(id) {\n        setLoadingUsuarios(true);\n        const resp = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${id}`);\n        const data = await resp.json();\n        setLoadingUsuarios(false);\n        setPosts(data);\n        openModalPosts();\n    }\n\n    async function verComentarios(id) {\n        setLoadingPosts(true);\n        const resp = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${id}`);\n        const data = await resp.json();\n        setLoadingPosts(false);\n        setComentarios(data);\n        openModalComentarios();\n    }\n\n    function openModalPosts() {\n        setShowModalPosts(true);\n    }\n\n    function closeModalPosts() {\n        setShowModalPosts(false);\n    }\n\n    function openModalComentarios() {\n        setShowModalPostsComentarios(true);\n    }\n\n    function closeModalComentarios() {\n        setShowModalPostsComentarios(false);\n    }\n\n    function openPerfil(obj) {\n        setUsuarioPerfil(obj);\n        setShowUsuarioPerfil(true);\n    }\n\n    function closePerfil() {\n        setUsuarioPerfil({});\n        setShowUsuarioPerfil(false);\n    }\n\n    return (\n        <Layout style={{background: \"#fff\"}}>\n            <Header>\n                <h1 style={{color: \"#fff\", textAlign: 'center'}}>REACT HOOKS TESTE DO DINHO</h1>\n            </Header>\n            <Content>\n                <List\n                    loading={loadingUsuarios}\n                    header=\"Usuários\"\n                    style={{margin: '24px 24px 24px 24px'}}\n                    pagination={{\n                        onChange: page => {\n                            console.log(page);\n                        },\n                        pageSize: 5,\n                    }}\n                    dataSource={usuarios}\n                    bordered\n                    renderItem={item => (\n                        <List.Item\n                            action={[]}\n                        >\n                            <b>Nome:</b> {item.name}<br/>\n                            <b>Usuário:</b> {item.username}<br/>\n                            <b>E-mail</b> {item.email}<br/>\n                            <Button type=\"primary\" icon=\"user\" style={{marginRight: '4px'}} onClick={() => {\n                                openPerfil(item)\n                            }}>Perfil</Button>\n\n                            <Button type=\"success\" icon=\"message\" style={{marginRight: '4px'}} onClick={() => {\n                                verPosts(item.id)\n                            }}>Posts</Button>\n\n\n                        </List.Item>\n                    )}/>\n\n                <Drawer\n                    visible={showUsuarioPerfil}\n                    onClose={closePerfil}\n                >\n                    <h3 style={{textAlign: 'center'}}>Dados Pessoais</h3>\n                    <Divider/>\n                    <b>Nome</b>: <br/>{usuarioPerfil.name}<br/>\n                    <b>Usuário</b>: <br/> {usuarioPerfil.username}<br/>\n                    <b>Telefone</b>: <br/>{usuarioPerfil.phone}<br/>\n                    <b>E-mail</b>: <br/>{usuarioPerfil.email}<br/>\n                    <b>Site</b>: <br/>{usuarioPerfil.website}<br/>\n\n                    <Divider/>\n                    <h3 style={{textAlign: 'center'}}>Empresa</h3>\n                    <Divider/>\n                    <b>Nome</b>: <br/>{usuarioPerfil.company ? usuarioPerfil.company.name : ''}<br/>\n                    <b>Frase de busca </b>: <br/>{usuarioPerfil.company ? usuarioPerfil.company.catchPhrase : ''}<br/>\n                    <b>BS</b>: <br/>{usuarioPerfil.company ? usuarioPerfil.company.bs : ''}<br/>\n\n                    <Divider/>\n                    <h3 style={{textAlign: 'center'}}>Endereço</h3>\n                    <Divider/>\n                    <b>Rua</b>: <br/>{usuarioPerfil.address ? usuarioPerfil.address.street : ''}<br/>\n                    <b>Logradouro</b>: <br/>{usuarioPerfil.address ? usuarioPerfil.address.suite : ''}<br/>\n                    <b>Cidade</b>: <br/>{usuarioPerfil.address ? usuarioPerfil.address.city : ''}<br/>\n                    <b>Codigo Postal </b>: <br/>{usuarioPerfil.address ? usuarioPerfil.address.zipcode : ''}<br/>\n                </Drawer>\n\n                <Modal\n                    width=\"90%\"\n                    visible={showModalPosts}\n                    onCancel={closeModalPosts}\n                    footer=\"\"\n                >\n                    <List loading={loadingPosts}\n\n                          pagination={{\n                              onChange: page => {\n                                  console.log(page);\n                              },\n                              pageSize: 5,\n                          }}\n                          header=\"posts\"\n                          style={{margin: '24px 24px 24px 24px'}}\n                          dataSource={posts}\n                          bordered\n                          renderItem={item => (\n                              <List.Item>\n                                  <b>Titulo:</b> {item.title}<br/>\n                                  <Button type=\"primary\" icon=\"comment\" onClick={() => {\n\n                                      verComentarios(item.id)\n                                  }}>Comentarios</Button>\n                              </List.Item>)}\n                    />\n                </Modal>\n\n                <Modal\n                    visible={showModalComentarios}\n                    onCancel={closeModalComentarios}\n                    footer=\"\"\n                >\n                    <List\n\n                        pagination={{\n                            onChange: page => {\n                                console.log(page);\n                            },\n                            pageSize: 5,\n                        }}\n                        header=\"Comentarios\"\n                        style={{margin: '24px 24px 24px 24px'}}\n                        dataSource={comentarios}\n                        bordered\n                        renderItem={item => (\n                            <List.Item>\n                                <b>Nome:</b> {item.name}<br/>\n                                <b>E-mail:</b> {item.email}<br/>\n                                <b>Comentario:</b> {item.body}<br/>\n                            </List.Item>)}\n                    />\n                </Modal>\n            </Content>\n        </Layout>\n    );\n}\n\n\n"],"sourceRoot":""}